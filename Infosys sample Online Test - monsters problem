// Problem Description


// While playing an RPG game, you were assigned to complete one of the hardest quests in this game.
// There are n monsters you'll need to defeat in this quest. Each monster i is described with two integer
// numbers - poweri and bonusi. To defeat this monster, you'll need at least poweri experience points. If
// you try fighting this monster without having enough experience points, you lose immediately. You will
// also gain bonusi experience points if you defeat this monster. You can defeat monsters in any order.
// The quest turned out to be very hard - you try to defeat the monsters but keep losing repeatedly. Your
// friend told you that this quest is impossible to complete. Knowing that, you're interested, what is the
// maximum possible number of monsters you can defeat? (Question difficulty level: Hardest)
// Input:
// The first line contains an integer, n, denoting the number of monsters.
// The next line contains an integer, e, denoting your initial experience.
// Each line i of the n subsequent lines (where 0 ≤ i < n) contains an integer, poweri, which represents
// power of the corresponding monster.
// Each line i of the n subsequent lines (where 0 ≤ i < n) contains an integer, bonusi, which represents
// bonus for defeating the corresponding monster.
// Sample cases:
// Input Output Output description
// 2
// 123
// 78
// 130
// 10
// 0
// 2 Initial experience level is 123 points.
// Defeat the first monster having power of 78 and bonus of 10.
// Experience level is now 123+10=133.
// Defeat the second monster.
// 3
// 100
// 101
// 100
// 304
// 100
// 1
// 524
// 2 Initial experience level is 100 points.
// Defeat the second monster having power of 100 and bonus of 1.
// Experience level is now 100+1=101.
// Defeat the first monster having power of 101 and bonus of 100.
// Experience level is now 101+100=201.
// The third monster can't be defeated.



#include <iostream>
#include <vector>
using namespace std;
class Monster {
public:
    int power = 0;
    int bonus = 0;
    Monster(int newPower){
        power = newPower;
    }
    Monster(int newBonus ,int newPower){
        // power = newPower;
        bonus = newBonus;
    }
};

int main()
{
    vector<Monster> monsters;
    int monstersCount = 0 , currExperince = 0 , count = 0;
    cin>> monstersCount;
    cin>> currExperince;
    for (int i = 0; i < monstersCount; i++){
        int tempPower = 0;
        cin >> tempPower;
        monsters.push_back(Monster(tempPower));
        cout<<"power added"<<endl;
    }
    for (int i = 0; i < monstersCount; i++){
        int tempBonus = 0;
        cin >> tempBonus;
        monsters[i].bonus = tempBonus;
        cout<<"bonus added"<<endl;
    }
    cout<<monsters[0].power<<" and "<<monsters[0].bonus<<endl;
    
        int i = 0;
        while( i < monsters.size()){
            if (currExperince >= monsters[i].power){
                currExperince += monsters[i].bonus;
                monsters.erase(monsters.begin() + i);
                count++;
                i = 0;
            }
            else {
                i++;
            }
        }
         cout <<"final count : " <<count;


    return 0;
}
